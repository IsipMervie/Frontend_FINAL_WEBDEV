{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mervi\\\\Downloads\\\\SYSTEM-CLIENT-main\\\\SYSTEM-CLIENT-main\\\\src\\\\UserContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext();\n\n// UserProvider component that wraps the application to provide the context\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  // Initialize the user state, it could be null or data from localStorage\n  const [user, setUser] = useState(null);\n\n  // If user data exists in localStorage, initialize user state\n  useEffect(() => {\n    const storedUser = localStorage.getItem(\"user\");\n    if (storedUser) {\n      setUser(JSON.parse(storedUser)); // If user data exists in localStorage, use it\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      setUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = UserProvider;\nexport default UserContext;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","user","setUser","storedUser","localStorage","getItem","JSON","parse","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mervi/Downloads/SYSTEM-CLIENT-main/SYSTEM-CLIENT-main/src/UserContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\n\r\n// Create the context\r\nconst UserContext = createContext();\r\n\r\n// UserProvider component that wraps the application to provide the context\r\nexport const UserProvider = ({ children }) => {\r\n  // Initialize the user state, it could be null or data from localStorage\r\n  const [user, setUser] = useState(null);\r\n\r\n  // If user data exists in localStorage, initialize user state\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem(\"user\");\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));  // If user data exists in localStorage, use it\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <UserContext.Provider value={{ user, setUser }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n\r\nexport default UserContext;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMS,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,UAAU,EAAE;MACdD,OAAO,CAACI,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC,CAAC,CAAE;IACpC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA,CAACC,WAAW,CAACW,QAAQ;IAACC,KAAK,EAAE;MAAER,IAAI;MAAEC;IAAQ,CAAE;IAAAH,QAAA,EAC5CA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACb,EAAA,CAjBWF,YAAY;AAAAgB,EAAA,GAAZhB,YAAY;AAmBzB,eAAeD,WAAW;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}